<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Fx_NoR_Write_Read_File\Fx_NoR_Write_Read_File.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Fx_NoR_Write_Read_File\Fx_NoR_Write_Read_File.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Fri Apr 19 00:44:15 2024
<BR><P>
<H3>Maximum Stack Usage =          0 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>

<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[75]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[75]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[75]">ADC3_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[1d]">ADC_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[77]">BDMA_Channel0_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[78]">BDMA_Channel1_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[79]">BDMA_Channel2_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[7a]">BDMA_Channel3_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[7b]">BDMA_Channel4_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[7c]">BDMA_Channel5_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[7d]">BDMA_Channel6_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[7e]">BDMA_Channel7_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from stm32h7xx_it.o(.text.BusFault_Handler) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[63]">CEC_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[7f]">COMP1_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[8e]">CORDIC_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[85]">CRS_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[55]">CRYP_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[54]">DCMI_PSSI_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[68]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[69]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[6a]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[6b]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream0_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream1_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream2_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream3_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream4_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream5_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream6_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[60]">DMA2D_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream5_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream6_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream7_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[67]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[76]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[88]">DTS_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32h7xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[86]">ECC_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[33]">EXTI15_10_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[22]">EXTI9_5_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[1e]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[20]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[1f]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[21]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[93]">FDCAN3_IT0_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[94]">FDCAN3_IT1_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[49]">FDCAN_CAL_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[8d]">FMAC_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[57]">FPU_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[56]">HASH_RNG_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[74]">HSEM1_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from stm32h7xx_it.o(.text.HardFault_Handler) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[2b]">I2C1_ER_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[2a]">I2C1_EV_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[2d]">I2C2_ER_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[2c]">I2C2_EV_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[4f]">I2C3_ER_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[4e]">I2C3_EV_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[65]">I2C4_ER_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[64]">I2C4_EV_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[92]">I2C5_ER_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[91]">I2C5_EV_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[62]">LPTIM1_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[80]">LPTIM2_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[81]">LPTIM3_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[82]">LPTIM4_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[83]">LPTIM5_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[84]">LPUART1_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[5f]">LTDC_ER_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[5e]">LTDC_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[71]">MDIOS_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[70]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[72]">MDMA_IRQHandler</a> from stm32h7xx_it.o(.text.MDMA_IRQHandler) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from stm32h7xx_it.o(.text.MemManage_Handler) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from stm32h7xx_it.o(.text.NMI_Handler) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[61]">OCTOSPI1_IRQHandler</a> from stm32h7xx_it.o(.text.OCTOSPI1_IRQHandler) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[8a]">OCTOSPI2_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[9a]">OSPI_DMAAbortCplt</a> from stm32h7xx_hal_ospi.o(.text.OSPI_DMAAbortCplt) referenced 2 times from stm32h7xx_hal_ospi.o(.text.HAL_OSPI_IRQHandler)
 <LI><a href="#[9a]">OSPI_DMAAbortCplt</a> from stm32h7xx_hal_ospi.o(.text.OSPI_DMAAbortCplt) referenced 2 times from stm32h7xx_hal_ospi.o(.text.OSPI_DMAError)
 <LI><a href="#[9b]">OSPI_DMACplt</a> from stm32h7xx_hal_ospi.o(.text.OSPI_DMACplt) referenced 2 times from stm32h7xx_hal_ospi.o(.text.HAL_OSPI_Receive_DMA)
 <LI><a href="#[9b]">OSPI_DMACplt</a> from stm32h7xx_hal_ospi.o(.text.OSPI_DMACplt) referenced 2 times from stm32h7xx_hal_ospi.o(.text.HAL_OSPI_Transmit_DMA)
 <LI><a href="#[9c]">OSPI_DMAError</a> from stm32h7xx_hal_ospi.o(.text.OSPI_DMAError) referenced 2 times from stm32h7xx_hal_ospi.o(.text.HAL_OSPI_Receive_DMA)
 <LI><a href="#[9c]">OSPI_DMAError</a> from stm32h7xx_hal_ospi.o(.text.OSPI_DMAError) referenced 2 times from stm32h7xx_hal_ospi.o(.text.HAL_OSPI_Transmit_DMA)
 <LI><a href="#[8b]">OTFDEC1_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[8c]">OTFDEC2_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[51]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[50]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[53]">OTG_HS_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[52]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[c]">PVD_AVD_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from tx_thread_schedule.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[34]">RTC_Alarm_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[e]">RTC_WKUP_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[5d]">SAI1_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[87]">SAI4_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[3b]">SDMMC1_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[73]">SDMMC2_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[66]">SPDIF_RX_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[5a]">SPI4_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[5b]">SPI5_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[5c]">SPI6_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[6c]">SWPMI1_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from tx_initialize_low_level.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[98]">SystemInit</a> from system_stm32h7xx.o(.text.SystemInit) referenced from startup_stm32h735xx.o(.text)
 <LI><a href="#[d]">TAMP_STAMP_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[6d]">TIM15_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[6e]">TIM16_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[6f]">TIM17_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[26]">TIM1_CC_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[25]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[24]">TIM1_UP_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[95]">TIM23_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[96]">TIM24_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[27]">TIM2_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[28]">TIM3_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[29]">TIM4_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from stm32h7xx_it.o(.text.TIM6_DAC_IRQHandler) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[58]">UART7_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[59]">UART8_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[8f]">UART9_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[90]">USART10_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[32]">USART3_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[4d]">USART6_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from stm32h7xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[89]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32h735xx.o(.text) referenced from startup_stm32h735xx.o(RESET)
 <LI><a href="#[99]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32h735xx.o(.text)
 <LI><a href="#[9e]">_fx_system_timer_entry</a> from fx_system_timer_entry.o(.text._fx_system_timer_entry) referenced 2 times from fx_system_initialize.o(.text._fx_system_initialize)
 <LI><a href="#[9f]">_tx_byte_pool_cleanup</a> from tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup) referenced 2 times from tx_byte_allocate.o(.text._tx_byte_allocate)
 <LI><a href="#[9f]">_tx_byte_pool_cleanup</a> from tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup) referenced 2 times from tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup)
 <LI><a href="#[a0]">_tx_mutex_cleanup</a> from tx_mutex_cleanup.o(.text._tx_mutex_cleanup) referenced 2 times from tx_mutex_cleanup.o(.text._tx_mutex_cleanup)
 <LI><a href="#[a0]">_tx_mutex_cleanup</a> from tx_mutex_cleanup.o(.text._tx_mutex_cleanup) referenced 2 times from tx_mutex_get.o(.text._tx_mutex_get)
 <LI><a href="#[a1]">_tx_mutex_thread_release</a> from tx_mutex_cleanup.o(.text._tx_mutex_thread_release) referenced 2 times from tx_mutex_create.o(.text._tx_mutex_create)
 <LI><a href="#[a2]">_tx_semaphore_cleanup</a> from tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup) referenced 2 times from tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup)
 <LI><a href="#[a2]">_tx_semaphore_cleanup</a> from tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup) referenced 2 times from tx_semaphore_get.o(.text._tx_semaphore_get)
 <LI><a href="#[a4]">_tx_thread_shell_entry</a> from tx_thread_shell_entry.o(.text._tx_thread_shell_entry) referenced 2 times from tx_thread_create.o(.text._tx_thread_create)
 <LI><a href="#[a3]">_tx_thread_timeout</a> from tx_thread_timeout.o(.text._tx_thread_timeout) referenced 2 times from tx_thread_create.o(.text._tx_thread_create)
 <LI><a href="#[a5]">_tx_timer_thread_entry</a> from tx_timer_thread_entry.o(.text._tx_timer_thread_entry) referenced 4 times from tx_timer_initialize.o(.text._tx_timer_initialize)
 <LI><a href="#[ac]">fputc</a> from main.o(.text.fputc) referenced from printf4.o(i.__0printf$4)
 <LI><a href="#[9d]">fx_app_thread_entry</a> from app_filex.o(.text.fx_app_thread_entry) referenced 2 times from app_filex.o(.text.MX_FileX_Init)
 <LI><a href="#[a6]">fx_stm32_levelx_nor_driver</a> from fx_stm32_levelx_nor_driver.o(.text.fx_stm32_levelx_nor_driver) referenced 2 times from app_filex.o(.text.fx_app_thread_entry)
 <LI><a href="#[aa]">lx_ospi_driver_block_erased_verify</a> from lx_stm32_ospi_driver.o(.text.lx_ospi_driver_block_erased_verify) referenced 2 times from lx_stm32_ospi_driver.o(.text.lx_stm32_ospi_initialize)
 <LI><a href="#[a9]">lx_ospi_driver_erase_block</a> from lx_stm32_ospi_driver.o(.text.lx_ospi_driver_erase_block) referenced 2 times from lx_stm32_ospi_driver.o(.text.lx_stm32_ospi_initialize)
 <LI><a href="#[a7]">lx_ospi_driver_read_sector</a> from lx_stm32_ospi_driver.o(.text.lx_ospi_driver_read_sector) referenced 2 times from lx_stm32_ospi_driver.o(.text.lx_stm32_ospi_initialize)
 <LI><a href="#[ab]">lx_ospi_driver_system_error</a> from lx_stm32_ospi_driver_glue.o(.text.lx_ospi_driver_system_error) referenced 2 times from lx_stm32_ospi_driver.o(.text.lx_stm32_ospi_initialize)
 <LI><a href="#[a8]">lx_ospi_driver_write_sector</a> from lx_stm32_ospi_driver.o(.text.lx_ospi_driver_write_sector) referenced 2 times from lx_stm32_ospi_driver.o(.text.lx_stm32_ospi_initialize)
 <LI><a href="#[0]">lx_stm32_ospi_initialize</a> from lx_stm32_ospi_driver.o(.text.lx_stm32_ospi_initialize) referenced 2 times from fx_stm32_levelx_nor_driver.o(.data.fx_lx_nor_drivers)
 <LI><a href="#[97]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[99]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[bd]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>CORDIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DCMI_PSSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>DTS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>FDCAN3_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>FDCAN3_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>FMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>I2C5_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>I2C5_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>OCTOSPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>OTFDEC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>OTFDEC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>TIM23_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>TIM24_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>UART9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>USART10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h735xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[14e]"></a>_tx_initialize_low_level</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tx_initialize_low_level.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[af]"></a>__tx_BadHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_BadHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_BadHandler
</UL>

<P><STRONG><a name="[b0]"></a>__tx_HardfaultHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_HardfaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_HardfaultHandler
</UL>

<P><STRONG><a name="[b1]"></a>__tx_SVCallHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_SVCallHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_SVCallHandler
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tx_initialize_low_level.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>__tx_NMIHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_NMIHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_NMIHandler
</UL>

<P><STRONG><a name="[b4]"></a>__tx_DBGHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_DBGHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_DBGHandler
</UL>

<P><STRONG><a name="[150]"></a>_tx_thread_schedule</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tx_thread_schedule.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tx_thread_schedule.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[157]"></a>_tx_thread_stack_build</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tx_thread_stack_build.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
</UL>

<P><STRONG><a name="[b2]"></a>_tx_timer_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tx_timer_interrupt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_expiration_process
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_time_slice
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, uldiv.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_open
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_open
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_extended_seek
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_memory_copy
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_search
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_map_flush
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_create
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_create
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_open
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_create
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_initialize
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_initialize
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_open
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_open
</UL>

<P><STRONG><a name="[bc]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[ae]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[172]"></a>App_ThreadX_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_threadx.o(.text.App_ThreadX_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_application_define
</UL>

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>Error_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fx_app_thread_entry
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
</UL>

<P><STRONG><a name="[c1]"></a>HAL_Delay</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_Delay))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_lowlevel_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>HAL_GPIO_Init</STRONG> (Thumb, 486 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fx_app_thread_entry
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Transmit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_AutoPolling
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[fb]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[c3]"></a>HAL_Init</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_Init))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>HAL_InitTick</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, stm32h7xx_hal_timebase_tim.o(.text.HAL_InitTick))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[db]"></a>HAL_MDMA_Abort_IT</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32h7xx_hal_mdma.o(.text.HAL_MDMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_DMAError
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>HAL_MDMA_ConfigPostRequestMask</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32h7xx_hal_mdma.o(.text.HAL_MDMA_ConfigPostRequestMask))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
</UL>

<P><STRONG><a name="[103]"></a>HAL_MDMA_IRQHandler</STRONG> (Thumb, 486 bytes, Stack size 0 bytes, stm32h7xx_hal_mdma.o(.text.HAL_MDMA_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDMA_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>HAL_MDMA_Init</STRONG> (Thumb, 252 bytes, Stack size 0 bytes, stm32h7xx_hal_mdma.o(.text.HAL_MDMA_Init))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
</UL>

<P><STRONG><a name="[e4]"></a>HAL_MDMA_Start_IT</STRONG> (Thumb, 300 bytes, Stack size 0 bytes, stm32h7xx_hal_mdma.o(.text.HAL_MDMA_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Transmit_DMA
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive_DMA
</UL>

<P><STRONG><a name="[16c]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_ConfigRegion))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16b]"></a>HAL_MPU_Disable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16d]"></a>HAL_MPU_Enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>HAL_MspInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c9]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[16e]"></a>HAL_OSPIM_Config</STRONG> (Thumb, 1562 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPIM_Config))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>HAL_OSPI_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPI_AbortCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_DMAError
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_DMAAbortCplt
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>HAL_OSPI_AutoPolling</STRONG> (Thumb, 290 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPI_AutoPolling))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_lowlevel_init
</UL>

<P><STRONG><a name="[d9]"></a>HAL_OSPI_CmdCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPI_CmdCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>HAL_OSPI_Command</STRONG> (Thumb, 330 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPI_Command))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_ConfigCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_erase
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_write
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_read
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_get_status
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_lowlevel_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ospi_auto_polling_ready
</UL>

<P><STRONG><a name="[d8]"></a>HAL_OSPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_DMAError
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_DMAAbortCplt
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>HAL_OSPI_FifoThresholdCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPI_FifoThresholdCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_IRQHandler
</UL>

<P><STRONG><a name="[d2]"></a>HAL_OSPI_IRQHandler</STRONG> (Thumb, 408 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPI_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Abort_IT
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_AbortCpltCallback
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_CmdCpltCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_ErrorCallback
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_TimeOutCallback
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_FifoThresholdCallback
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_StatusMatchCallback
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_TxCpltCallback
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OCTOSPI1_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>HAL_OSPI_Init</STRONG> (Thumb, 296 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPI_Init))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>HAL_OSPI_MspInit</STRONG> (Thumb, 516 bytes, Stack size 0 bytes, stm32h7xx_hal_msp.o(.text.HAL_OSPI_MspInit))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_ConfigPostRequestMask
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
</UL>

<P><STRONG><a name="[e2]"></a>HAL_OSPI_Receive</STRONG> (Thumb, 412 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPI_Receive))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_get_status
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_lowlevel_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ospi_auto_polling_ready
</UL>

<P><STRONG><a name="[e3]"></a>HAL_OSPI_Receive_DMA</STRONG> (Thumb, 304 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPI_Receive_DMA))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_read
</UL>

<P><STRONG><a name="[d3]"></a>HAL_OSPI_RxCpltCallback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lx_stm32_ospi_driver_glue.o(.text.HAL_OSPI_RxCpltCallback))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_put
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>HAL_OSPI_StatusMatchCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPI_StatusMatchCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>HAL_OSPI_TimeOutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPI_TimeOutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>HAL_OSPI_Transmit</STRONG> (Thumb, 352 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPI_Transmit))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_lowlevel_init
</UL>

<P><STRONG><a name="[e7]"></a>HAL_OSPI_Transmit_DMA</STRONG> (Thumb, 228 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPI_Transmit_DMA))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_write
</UL>

<P><STRONG><a name="[d6]"></a>HAL_OSPI_TxCpltCallback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lx_stm32_ospi_driver_glue.o(.text.HAL_OSPI_TxCpltCallback))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_put
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text.HAL_PWREx_ConfigSupply))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[e9]"></a>HAL_RCCEx_GetD3PCLK1Freq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetD3PCLK1Freq))
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[10b]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 300 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[10c]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 300 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[df]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 2728 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
</UL>

<P><STRONG><a name="[ed]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 616 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ca]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ea]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
</UL>

<P><STRONG><a name="[cb]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[ee]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c5]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 276 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ef]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1304 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[f7]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim_ex.o(.text.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim_ex.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[f0]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[cd]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[f4]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 396 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[171]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[170]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16f]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>HAL_UART_Init</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>HAL_UART_MspInit</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, stm32h7xx_hal_msp.o(.text.HAL_UART_MspInit))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[101]"></a>HAL_UART_Transmit</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>MDMA_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.MDMA_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[104]"></a>MX_FileX_Init</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, app_filex.o(.text.MX_FileX_Init))
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_system_initialize
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_application_define
</UL>

<P><STRONG><a name="[108]"></a>MX_ThreadX_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_threadx.o(.text.MX_ThreadX_Init))
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>OCTOSPI1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.OCTOSPI1_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[10a]"></a>SystemClock_Config</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>SystemInit</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, system_stm32h7xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.TIM6_DAC_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 372 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[ff]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[100]"></a>UART_CheckIdleState</STRONG> (Thumb, 374 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[fe]"></a>UART_SetConfig</STRONG> (Thumb, 1228 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[102]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 746 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h735xx.o(RESET)
</UL>
<P><STRONG><a name="[10d]"></a>_fx_directory_entry_read</STRONG> (Thumb, 2238 bytes, Stack size 0 bytes, fx_directory_entry_read.o(.text._fx_directory_entry_read))
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_32_unsigned_read
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_16_unsigned_read
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_entry_read
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_search
</UL>

<P><STRONG><a name="[112]"></a>_fx_directory_entry_write</STRONG> (Thumb, 3316 bytes, Stack size 0 bytes, fx_directory_entry_write.o(.text._fx_directory_entry_write))
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_32_unsigned_write
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_16_unsigned_write
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_write
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_entry_read
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_close
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_close
</UL>

<P><STRONG><a name="[118]"></a>_fx_directory_name_extract</STRONG> (Thumb, 296 bytes, Stack size 0 bytes, fx_directory_name_extract.o(.text._fx_directory_name_extract))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_search
</UL>

<P><STRONG><a name="[116]"></a>_fx_directory_search</STRONG> (Thumb, 1990 bytes, Stack size 0 bytes, fx_directory_search.o(.text._fx_directory_search))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_entry_read
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_name_extract
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_open
</UL>

<P><STRONG><a name="[119]"></a>_fx_file_close</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, fx_file_close.o(.text._fx_file_close))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_write
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_file_close
</UL>

<P><STRONG><a name="[11c]"></a>_fx_file_extended_seek</STRONG> (Thumb, 604 bytes, Stack size 0 bytes, fx_file_extended_seek.o(.text._fx_file_extended_seek))
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_entry_read
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_seek
</UL>

<P><STRONG><a name="[11d]"></a>_fx_file_open</STRONG> (Thumb, 1050 bytes, Stack size 0 bytes, fx_file_open.o(.text._fx_file_open))
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_entry_read
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_search
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_file_open
</UL>

<P><STRONG><a name="[11e]"></a>_fx_file_read</STRONG> (Thumb, 774 bytes, Stack size 0 bytes, fx_file_read.o(.text._fx_file_read))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_memory_copy
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_entry_read
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_file_read
</UL>

<P><STRONG><a name="[120]"></a>_fx_file_seek</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fx_file_seek.o(.text._fx_file_seek))
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_extended_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_file_seek
</UL>

<P><STRONG><a name="[121]"></a>_fx_media_abort</STRONG> (Thumb, 264 bytes, Stack size 0 bytes, fx_media_abort.o(.text._fx_media_abort))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_delete
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_close
</UL>

<P><STRONG><a name="[123]"></a>_fx_media_boot_info_extract</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, fx_media_boot_info_extract.o(.text._fx_media_boot_info_extract))
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_32_unsigned_read
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_16_unsigned_read
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_open
</UL>

<P><STRONG><a name="[124]"></a>_fx_media_close</STRONG> (Thumb, 604 bytes, Stack size 0 bytes, fx_media_close.o(.text._fx_media_close))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_map_flush
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_flush
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_delete
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_abort
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_32_unsigned_write
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_32_unsigned_read
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_flush
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_write
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_media_close
</UL>

<P><STRONG><a name="[128]"></a>_fx_media_extended_space_available</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, fx_media_extended_space_available.o(.text._fx_media_extended_space_available))
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_space_available
</UL>

<P><STRONG><a name="[129]"></a>_fx_media_open</STRONG> (Thumb, 1592 bytes, Stack size 0 bytes, fx_media_open.o(.text._fx_media_open))
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_create
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_boot_info_extract
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_32_unsigned_read
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_16_unsigned_read
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_flush
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_entry_read
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_media_open
</UL>

<P><STRONG><a name="[12c]"></a>_fx_media_space_available</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fx_media_space_available.o(.text._fx_media_space_available))
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_extended_space_available
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_media_space_available
</UL>

<P><STRONG><a name="[107]"></a>_fx_system_initialize</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, fx_system_initialize.o(.text._fx_system_initialize))
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FileX_Init
</UL>

<P><STRONG><a name="[9e]"></a>_fx_system_timer_entry</STRONG> (Thumb, 530 bytes, Stack size 0 bytes, fx_system_timer_entry.o(.text._fx_system_timer_entry))
<BR>[Address Reference Count : 1]<UL><LI> fx_system_initialize.o(.text._fx_system_initialize)
</UL>
<P><STRONG><a name="[110]"></a>_fx_utility_16_unsigned_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fx_utility_16_unsigned_read.o(.text._fx_utility_16_unsigned_read))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_open
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_boot_info_extract
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_entry_read
</UL>

<P><STRONG><a name="[114]"></a>_fx_utility_16_unsigned_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fx_utility_16_unsigned_write.o(.text._fx_utility_16_unsigned_write))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_flush
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_write
</UL>

<P><STRONG><a name="[111]"></a>_fx_utility_32_unsigned_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fx_utility_32_unsigned_read.o(.text._fx_utility_32_unsigned_read))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_open
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_close
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_boot_info_extract
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_entry_read
</UL>

<P><STRONG><a name="[115]"></a>_fx_utility_32_unsigned_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fx_utility_32_unsigned_write.o(.text._fx_utility_32_unsigned_write))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_close
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_flush
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_write
</UL>

<P><STRONG><a name="[10e]"></a>_fx_utility_FAT_entry_read</STRONG> (Thumb, 748 bytes, Stack size 0 bytes, fx_utility_fat_entry_read.o(.text._fx_utility_FAT_entry_read))
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_flush
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_32_unsigned_read
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_16_unsigned_read
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_read
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_open
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_read
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_open
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_extended_seek
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_read
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_write
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_search
</UL>

<P><STRONG><a name="[125]"></a>_fx_utility_FAT_flush</STRONG> (Thumb, 804 bytes, Stack size 0 bytes, fx_utility_fat_flush.o(.text._fx_utility_FAT_flush))
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_32_unsigned_write
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_16_unsigned_write
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_write
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_read
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_close
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_entry_read
</UL>

<P><STRONG><a name="[126]"></a>_fx_utility_FAT_map_flush</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, fx_utility_fat_map_flush.o(.text._fx_utility_FAT_map_flush))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_write
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_read
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_close
</UL>

<P><STRONG><a name="[12e]"></a>_fx_utility_logical_sector_cache_entry_read</STRONG> (Thumb, 844 bytes, Stack size 0 bytes, fx_utility_logical_sector_cache_entry_read.o(.text._fx_utility_logical_sector_cache_entry_read))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_read
</UL>

<P><STRONG><a name="[127]"></a>_fx_utility_logical_sector_flush</STRONG> (Thumb, 1786 bytes, Stack size 0 bytes, fx_utility_logical_sector_flush.o(.text._fx_utility_logical_sector_flush))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_open
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_close
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_write
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_read
</UL>

<P><STRONG><a name="[10f]"></a>_fx_utility_logical_sector_read</STRONG> (Thumb, 782 bytes, Stack size 0 bytes, fx_utility_logical_sector_read.o(.text._fx_utility_logical_sector_read))
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_cache_entry_read
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_memory_copy
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_map_flush
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_flush
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_read
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_entry_read
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_write
</UL>

<P><STRONG><a name="[113]"></a>_fx_utility_logical_sector_write</STRONG> (Thumb, 516 bytes, Stack size 0 bytes, fx_utility_logical_sector_write.o(.text._fx_utility_logical_sector_write))
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_map_flush
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_flush
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_write
</UL>

<P><STRONG><a name="[11f]"></a>_fx_utility_memory_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fx_utility_memory_copy.o(.text._fx_utility_memory_copy))
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_read
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_read
</UL>

<P><STRONG><a name="[130]"></a>_fxe_file_close</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, fxe_file_close.o(.text._fxe_file_close))
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_close
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fx_app_thread_entry
</UL>

<P><STRONG><a name="[131]"></a>_fxe_file_open</STRONG> (Thumb, 236 bytes, Stack size 0 bytes, fxe_file_open.o(.text._fxe_file_open))
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_open
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fx_app_thread_entry
</UL>

<P><STRONG><a name="[132]"></a>_fxe_file_read</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, fxe_file_read.o(.text._fxe_file_read))
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_read
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fx_app_thread_entry
</UL>

<P><STRONG><a name="[133]"></a>_fxe_file_seek</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, fxe_file_seek.o(.text._fxe_file_seek))
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fx_app_thread_entry
</UL>

<P><STRONG><a name="[134]"></a>_fxe_media_close</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, fxe_media_close.o(.text._fxe_media_close))
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_close
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fx_app_thread_entry
</UL>

<P><STRONG><a name="[135]"></a>_fxe_media_open</STRONG> (Thumb, 294 bytes, Stack size 0 bytes, fxe_media_open.o(.text._fxe_media_open))
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_open
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_preemption_change
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_identify
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fx_app_thread_entry
</UL>

<P><STRONG><a name="[138]"></a>_fxe_media_space_available</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fxe_media_space_available.o(.text._fxe_media_space_available))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_space_available
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fx_app_thread_entry
</UL>

<P><STRONG><a name="[139]"></a>_lx_nor_flash_block_reclaim</STRONG> (Thumb, 768 bytes, Stack size 0 bytes, lx_nor_flash_block_reclaim.o(.text._lx_nor_flash_block_reclaim))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_system_error
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_physical_sector_allocate
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_sector_mapping_cache_invalidate
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_driver_read
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_driver_block_erase
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_driver_write
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_next_block_to_erase_find
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_sector_release
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_sector_write
</UL>

<P><STRONG><a name="[161]"></a>_lx_nor_flash_close</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, lx_nor_flash_close.o(.text._lx_nor_flash_close))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fx_stm32_levelx_nor_driver
</UL>

<P><STRONG><a name="[13c]"></a>_lx_nor_flash_driver_block_erase</STRONG> (Thumb, 322 bytes, Stack size 0 bytes, lx_nor_flash_driver_block_erase.o(.text._lx_nor_flash_driver_block_erase))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_block_reclaim
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_open
</UL>

<P><STRONG><a name="[13d]"></a>_lx_nor_flash_driver_read</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, lx_nor_flash_driver_read.o(.text._lx_nor_flash_driver_read))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_logical_sector_find
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_physical_sector_allocate
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_next_block_to_erase_find
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_block_reclaim
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_sector_release
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_open
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_sector_write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_sector_read
</UL>

<P><STRONG><a name="[13b]"></a>_lx_nor_flash_driver_write</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, lx_nor_flash_driver_write.o(.text._lx_nor_flash_driver_write))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_physical_sector_allocate
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_block_reclaim
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_sector_release
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_open
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_sector_write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_sector_read
</UL>

<P><STRONG><a name="[141]"></a>_lx_nor_flash_logical_sector_find</STRONG> (Thumb, 864 bytes, Stack size 0 bytes, lx_nor_flash_logical_sector_find.o(.text._lx_nor_flash_logical_sector_find))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_system_error
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_driver_read
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_sector_release
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_open
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_sector_write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_sector_read
</UL>

<P><STRONG><a name="[13a]"></a>_lx_nor_flash_next_block_to_erase_find</STRONG> (Thumb, 492 bytes, Stack size 0 bytes, lx_nor_flash_next_block_to_erase_find.o(.text._lx_nor_flash_next_block_to_erase_find))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_system_error
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_driver_read
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_block_reclaim
</UL>

<P><STRONG><a name="[142]"></a>_lx_nor_flash_open</STRONG> (Thumb, 1282 bytes, Stack size 0 bytes, lx_nor_flash_open.o(.text._lx_nor_flash_open))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_logical_sector_find
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_system_error
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_driver_read
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_driver_block_erase
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_driver_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fx_stm32_levelx_nor_driver
</UL>

<P><STRONG><a name="[13f]"></a>_lx_nor_flash_physical_sector_allocate</STRONG> (Thumb, 554 bytes, Stack size 0 bytes, lx_nor_flash_physical_sector_allocate.o(.text._lx_nor_flash_physical_sector_allocate))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_system_error
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_driver_read
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_driver_write
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_block_reclaim
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_sector_write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_sector_read
</UL>

<P><STRONG><a name="[13e]"></a>_lx_nor_flash_sector_mapping_cache_invalidate</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, lx_nor_flash_sector_mapping_cache_invalidate.o(.text._lx_nor_flash_sector_mapping_cache_invalidate))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_block_reclaim
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_sector_release
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_sector_write
</UL>

<P><STRONG><a name="[143]"></a>_lx_nor_flash_sector_read</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, lx_nor_flash_sector_read.o(.text._lx_nor_flash_sector_read))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_logical_sector_find
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_system_error
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_physical_sector_allocate
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_driver_read
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_driver_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fx_stm32_levelx_nor_driver
</UL>

<P><STRONG><a name="[144]"></a>_lx_nor_flash_sector_release</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, lx_nor_flash_sector_release.o(.text._lx_nor_flash_sector_release))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_logical_sector_find
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_system_error
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_sector_mapping_cache_invalidate
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_driver_read
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_driver_write
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_block_reclaim
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fx_stm32_levelx_nor_driver
</UL>

<P><STRONG><a name="[145]"></a>_lx_nor_flash_sector_write</STRONG> (Thumb, 364 bytes, Stack size 0 bytes, lx_nor_flash_sector_write.o(.text._lx_nor_flash_sector_write))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_logical_sector_find
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_system_error
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_physical_sector_allocate
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_sector_mapping_cache_invalidate
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_driver_read
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_driver_write
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_block_reclaim
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fx_stm32_levelx_nor_driver
</UL>

<P><STRONG><a name="[140]"></a>_lx_nor_flash_system_error</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lx_nor_flash_system_error.o(.text._lx_nor_flash_system_error))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_logical_sector_find
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_physical_sector_allocate
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_next_block_to_erase_find
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_block_reclaim
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_sector_release
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_open
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_sector_write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_sector_read
</UL>

<P><STRONG><a name="[146]"></a>_tx_byte_allocate</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, tx_byte_allocate.o(.text._tx_byte_allocate))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_search
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_allocate
</UL>

<P><STRONG><a name="[9f]"></a>_tx_byte_pool_cleanup</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup))
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tx_byte_allocate.o(.text._tx_byte_allocate)
<LI> tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup)
</UL>
<P><STRONG><a name="[14a]"></a>_tx_byte_pool_create</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, tx_byte_pool_create.o(.text._tx_byte_pool_create))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_pool_create
</UL>

<P><STRONG><a name="[147]"></a>_tx_byte_pool_search</STRONG> (Thumb, 236 bytes, Stack size 0 bytes, tx_byte_pool_search.o(.text._tx_byte_pool_search))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_allocate
</UL>

<P><STRONG><a name="[14b]"></a>_tx_initialize_high_level</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tx_initialize_high_level.o(.text._tx_initialize_high_level))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_initialize
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[109]"></a>_tx_initialize_kernel_enter</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, tx_initialize_kernel_enter.o(.text._tx_initialize_kernel_enter))
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_application_define
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_low_level
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_high_level
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ThreadX_Init
</UL>

<P><STRONG><a name="[a0]"></a>_tx_mutex_cleanup</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, tx_mutex_cleanup.o(.text._tx_mutex_cleanup))
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tx_mutex_cleanup.o(.text._tx_mutex_cleanup)
<LI> tx_mutex_get.o(.text._tx_mutex_get)
</UL>
<P><STRONG><a name="[12b]"></a>_tx_mutex_create</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, tx_mutex_create.o(.text._tx_mutex_create))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_open
</UL>

<P><STRONG><a name="[122]"></a>_tx_mutex_delete</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, tx_mutex_delete.o(.text._tx_mutex_delete))
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_close
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_abort
</UL>

<P><STRONG><a name="[11a]"></a>_tx_mutex_get</STRONG> (Thumb, 284 bytes, Stack size 0 bytes, tx_mutex_get.o(.text._tx_mutex_get))
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_file_open
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_extended_space_available
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_close
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_abort
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_read
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_open
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_extended_seek
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_close
</UL>

<P><STRONG><a name="[153]"></a>_tx_mutex_prioritize</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, tx_mutex_prioritize.o(.text._tx_mutex_prioritize))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>

<P><STRONG><a name="[152]"></a>_tx_mutex_priority_change</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, tx_mutex_priority_change.o(.text._tx_mutex_priority_change))
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
</UL>

<P><STRONG><a name="[11b]"></a>_tx_mutex_put</STRONG> (Thumb, 562 bytes, Stack size 0 bytes, tx_mutex_put.o(.text._tx_mutex_put))
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_prioritize
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_file_open
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_extended_space_available
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_close
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_delete
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_read
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_open
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_extended_seek
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_close
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_thread_release
</UL>

<P><STRONG><a name="[a1]"></a>_tx_mutex_thread_release</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, tx_mutex_cleanup.o(.text._tx_mutex_thread_release))
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_mutex_create.o(.text._tx_mutex_create)
</UL>
<P><STRONG><a name="[a2]"></a>_tx_semaphore_cleanup</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup))
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tx_semaphore_get.o(.text._tx_semaphore_get)
<LI> tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup)
</UL>
<P><STRONG><a name="[15d]"></a>_tx_semaphore_create</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, tx_semaphore_create.o(.text._tx_semaphore_create))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_create
</UL>

<P><STRONG><a name="[154]"></a>_tx_semaphore_get</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, tx_semaphore_get.o(.text._tx_semaphore_get))
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_get
</UL>

<P><STRONG><a name="[155]"></a>_tx_semaphore_put</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, tx_semaphore_put.o(.text._tx_semaphore_put))
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_put
</UL>

<P><STRONG><a name="[156]"></a>_tx_thread_create</STRONG> (Thumb, 316 bytes, Stack size 0 bytes, tx_thread_create.o(.text._tx_thread_create))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_build
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_initialize
</UL>

<P><STRONG><a name="[136]"></a>_tx_thread_identify</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tx_thread_identify.o(.text._tx_thread_identify))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_media_open
</UL>

<P><STRONG><a name="[14c]"></a>_tx_thread_initialize</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, tx_thread_initialize.o(.text._tx_thread_initialize))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_high_level
</UL>

<P><STRONG><a name="[137]"></a>_tx_thread_preemption_change</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, tx_thread_preemption_change.o(.text._tx_thread_preemption_change))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_media_open
</UL>

<P><STRONG><a name="[a4]"></a>_tx_thread_shell_entry</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, tx_thread_shell_entry.o(.text._tx_thread_shell_entry))
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_thread_create.o(.text._tx_thread_create)
</UL>
<P><STRONG><a name="[158]"></a>_tx_thread_sleep</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, tx_thread_sleep.o(.text._tx_thread_sleep))
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fx_app_thread_entry
</UL>

<P><STRONG><a name="[151]"></a>_tx_thread_system_preempt_check</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, tx_thread_system_preempt_check.o(.text._tx_thread_system_preempt_check))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_pool_create
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_delete
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_prioritize
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_create
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_preemption_change
</UL>

<P><STRONG><a name="[149]"></a>_tx_thread_system_resume</STRONG> (Thumb, 304 bytes, Stack size 0 bytes, tx_thread_system_resume.o(.text._tx_thread_system_resume))
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_delete
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_timeout
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_put
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_cleanup
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_cleanup
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_cleanup
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_expiration_process
</UL>

<P><STRONG><a name="[148]"></a>_tx_thread_system_suspend</STRONG> (Thumb, 394 bytes, Stack size 0 bytes, tx_thread_system_suspend.o(.text._tx_thread_system_suspend))
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_activate
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_thread_entry
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_shell_entry
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_get
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_allocate
</UL>

<P><STRONG><a name="[b6]"></a>_tx_thread_time_slice</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, tx_thread_time_slice.o(.text._tx_thread_time_slice))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_interrupt
</UL>

<P><STRONG><a name="[a3]"></a>_tx_thread_timeout</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, tx_thread_timeout.o(.text._tx_thread_timeout))
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_thread_create.o(.text._tx_thread_create)
</UL>
<P><STRONG><a name="[162]"></a>_tx_time_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tx_time_get.o(.text._tx_time_get))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ospi_auto_polling_ready
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_initialize
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_ospi_driver_block_erased_verify
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_ospi_driver_erase_block
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_ospi_driver_write_sector
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_ospi_driver_read_sector
</UL>

<P><STRONG><a name="[12d]"></a>_tx_timer_create</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, tx_timer_create.o(.text._tx_timer_create))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_activate
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_system_initialize
</UL>

<P><STRONG><a name="[b5]"></a>_tx_timer_expiration_process</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tx_timer_expiration_process.o(.text._tx_timer_expiration_process))
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_interrupt
</UL>

<P><STRONG><a name="[14d]"></a>_tx_timer_initialize</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, tx_timer_initialize.o(.text._tx_timer_initialize))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_high_level
</UL>

<P><STRONG><a name="[15a]"></a>_tx_timer_system_activate</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, tx_timer_system_activate.o(.text._tx_timer_system_activate))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_create
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_thread_entry
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>

<P><STRONG><a name="[159]"></a>_tx_timer_system_deactivate</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, tx_timer_system_deactivate.o(.text._tx_timer_system_deactivate))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>

<P><STRONG><a name="[a5]"></a>_tx_timer_thread_entry</STRONG> (Thumb, 322 bytes, Stack size 0 bytes, tx_timer_thread_entry.o(.text._tx_timer_thread_entry))
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_activate
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_timer_initialize.o(.text._tx_timer_initialize)
</UL>
<P><STRONG><a name="[105]"></a>_txe_byte_allocate</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, txe_byte_allocate.o(.text._txe_byte_allocate))
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FileX_Init
</UL>

<P><STRONG><a name="[15b]"></a>_txe_byte_pool_create</STRONG> (Thumb, 356 bytes, Stack size 0 bytes, txe_byte_pool_create.o(.text._txe_byte_pool_create))
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_create
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_application_define
</UL>

<P><STRONG><a name="[15c]"></a>_txe_semaphore_create</STRONG> (Thumb, 298 bytes, Stack size 0 bytes, txe_semaphore_create.o(.text._txe_semaphore_create))
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_create
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_initialize
</UL>

<P><STRONG><a name="[15e]"></a>_txe_semaphore_get</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, txe_semaphore_get.o(.text._txe_semaphore_get))
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_get
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_write
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_ospi_driver_write_sector
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_ospi_driver_read_sector
</UL>

<P><STRONG><a name="[e5]"></a>_txe_semaphore_put</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, txe_semaphore_put.o(.text._txe_semaphore_put))
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_put
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_TxCpltCallback
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_RxCpltCallback
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_write
</UL>

<P><STRONG><a name="[106]"></a>_txe_thread_create</STRONG> (Thumb, 388 bytes, Stack size 0 bytes, txe_thread_create.o(.text._txe_thread_create))
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FileX_Init
</UL>

<P><STRONG><a name="[ac]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(.text.fputc))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf4.o(i.__0printf$4)
</UL>
<P><STRONG><a name="[9d]"></a>fx_app_thread_entry</STRONG> (Thumb, 380 bytes, Stack size 0 bytes, app_filex.o(.text.fx_app_thread_entry))
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_media_close
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_file_close
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_file_read
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_file_seek
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_file_open
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_media_space_available
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_media_open
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_filex.o(.text.MX_FileX_Init)
</UL>
<P><STRONG><a name="[a6]"></a>fx_stm32_levelx_nor_driver</STRONG> (Thumb, 486 bytes, Stack size 0 bytes, fx_stm32_levelx_nor_driver.o(.text.fx_stm32_levelx_nor_driver))
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_close
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_sector_release
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_open
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_sector_write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lx_nor_flash_sector_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_filex.o(.text.fx_app_thread_entry)
</UL>
<P><STRONG><a name="[ab]"></a>lx_ospi_driver_system_error</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lx_stm32_ospi_driver_glue.o(.text.lx_ospi_driver_system_error))
<BR>[Address Reference Count : 1]<UL><LI> lx_stm32_ospi_driver.o(.text.lx_stm32_ospi_initialize)
</UL>
<P><STRONG><a name="[165]"></a>lx_stm32_ospi_erase</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, lx_stm32_ospi_driver_glue.o(.text.lx_stm32_ospi_erase))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ospi_auto_polling_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_ospi_driver_erase_block
</UL>

<P><STRONG><a name="[16a]"></a>lx_stm32_ospi_get_info</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lx_stm32_ospi_driver_glue.o(.text.lx_stm32_ospi_get_info))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_initialize
</UL>

<P><STRONG><a name="[163]"></a>lx_stm32_ospi_get_status</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, lx_stm32_ospi_driver_glue.o(.text.lx_stm32_ospi_get_status))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_initialize
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_ospi_driver_block_erased_verify
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_ospi_driver_erase_block
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_ospi_driver_write_sector
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_ospi_driver_read_sector
</UL>

<P><STRONG><a name="[0]"></a>lx_stm32_ospi_initialize</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, lx_stm32_ospi_driver.o(.text.lx_stm32_ospi_initialize))
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_time_get
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_get_info
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_get_status
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_lowlevel_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fx_stm32_levelx_nor_driver.o(.data.fx_lx_nor_drivers)
</UL>
<P><STRONG><a name="[164]"></a>lx_stm32_ospi_is_block_erased</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lx_stm32_ospi_driver_glue.o(.text.lx_stm32_ospi_is_block_erased))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_ospi_driver_block_erased_verify
</UL>

<P><STRONG><a name="[169]"></a>lx_stm32_ospi_lowlevel_init</STRONG> (Thumb, 690 bytes, Stack size 0 bytes, lx_stm32_ospi_driver_glue.o(.text.lx_stm32_ospi_lowlevel_init))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Transmit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_AutoPolling
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ospi_auto_polling_ready
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_initialize
</UL>

<P><STRONG><a name="[166]"></a>lx_stm32_ospi_read</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, lx_stm32_ospi_driver_glue.o(.text.lx_stm32_ospi_read))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive_DMA
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_ospi_driver_read_sector
</UL>

<P><STRONG><a name="[167]"></a>lx_stm32_ospi_write</STRONG> (Thumb, 280 bytes, Stack size 0 bytes, lx_stm32_ospi_driver_glue.o(.text.lx_stm32_ospi_write))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_put
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_get
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Transmit_DMA
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ospi_auto_polling_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_ospi_driver_write_sector
</UL>

<P><STRONG><a name="[97]"></a>main</STRONG> (Thumb, 902 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ThreadX_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPIM_Config
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[14f]"></a>tx_application_define</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, app_azure_rtos.o(.text.tx_application_define))
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FileX_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_pool_create
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ThreadX_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[173]"></a>__0printf$4</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf4.o(i.__0printf$4), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[160]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printf4.o(i.__0printf$4))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fx_app_thread_entry
</UL>

<P><STRONG><a name="[15f]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, puts.o(i.puts))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fx_app_thread_entry
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[168]"></a>ospi_auto_polling_ready</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, lx_stm32_ospi_driver_glue.o(.text.ospi_auto_polling_ready))
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_time_get
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_erase
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_write
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_lowlevel_init
</UL>

<P><STRONG><a name="[9a]"></a>OSPI_DMAAbortCplt</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(.text.OSPI_DMAAbortCplt))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_AbortCpltCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32h7xx_hal_ospi.o(.text.HAL_OSPI_IRQHandler)
<LI> stm32h7xx_hal_ospi.o(.text.OSPI_DMAError)
</UL>
<P><STRONG><a name="[d1]"></a>OSPI_ConfigCmd</STRONG> (Thumb, 474 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(.text.OSPI_ConfigCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
</UL>

<P><STRONG><a name="[9b]"></a>OSPI_DMACplt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(.text.OSPI_DMACplt))
<BR>[Address Reference Count : 2]<UL><LI> stm32h7xx_hal_ospi.o(.text.HAL_OSPI_Transmit_DMA)
<LI> stm32h7xx_hal_ospi.o(.text.HAL_OSPI_Receive_DMA)
</UL>
<P><STRONG><a name="[9c]"></a>OSPI_DMAError</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, stm32h7xx_hal_ospi.o(.text.OSPI_DMAError))
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Abort_IT
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_AbortCpltCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32h7xx_hal_ospi.o(.text.HAL_OSPI_Transmit_DMA)
<LI> stm32h7xx_hal_ospi.o(.text.HAL_OSPI_Receive_DMA)
</UL>
<P><STRONG><a name="[eb]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 290 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL2_Config))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[ec]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 290 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL3_Config))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[a7]"></a>lx_ospi_driver_read_sector</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, lx_stm32_ospi_driver.o(.text.lx_ospi_driver_read_sector))
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_time_get
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_get
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_read
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_get_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lx_stm32_ospi_driver.o(.text.lx_stm32_ospi_initialize)
</UL>
<P><STRONG><a name="[a8]"></a>lx_ospi_driver_write_sector</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, lx_stm32_ospi_driver.o(.text.lx_ospi_driver_write_sector))
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_time_get
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_get
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_write
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_get_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lx_stm32_ospi_driver.o(.text.lx_stm32_ospi_initialize)
</UL>
<P><STRONG><a name="[a9]"></a>lx_ospi_driver_erase_block</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, lx_stm32_ospi_driver.o(.text.lx_ospi_driver_erase_block))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_erase
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_time_get
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_get_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lx_stm32_ospi_driver.o(.text.lx_stm32_ospi_initialize)
</UL>
<P><STRONG><a name="[aa]"></a>lx_ospi_driver_block_erased_verify</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lx_stm32_ospi_driver.o(.text.lx_ospi_driver_block_erased_verify))
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_is_block_erased
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_time_get
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lx_stm32_ospi_get_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lx_stm32_ospi_driver.o(.text.lx_stm32_ospi_initialize)
</UL>
<P><STRONG><a name="[174]"></a>_printf_core</STRONG> (Thumb, 552 bytes, Stack size 0 bytes, printf4.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$4
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
